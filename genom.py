from tools.dna_rna_tools import (valid, transcribe, reverse,
                                 complement, reverse_complement)
from tools.filter_parameters import (ch_length_bounds, ch_gc_bounds,
                                     ch_quality_threshold)


def run_dna_rna_tools(*args) -> str | list:
    """
    Функция run_dna_rna_tools() возвращает  последовательности нуклеиновых
    кислот после проведения указанной в аргументе процедуры над переданными в
    функцию изначальными последовательностями ДНК или РНК.
    Функция проводит проверку на возможность существованияи значальных
    последовательностей ДНК и РНК. При наличии Т и U в одно последовательности,
    функция прекращается и возвращает сообщение пользователю:
    "Please insert correct sequence"
    Вариант вызова функции:
    run_dna_rna_tools('ATG','aT','reverse')
        'ATG','aT',... - произвольное количество аргументов с
        последовательностями ДНК или РНК в формате str.
        'reverse' - всегда последний аргумент функции, с указанием процедуры
        которую необходимо выполнить в формате str.
        Список процедур:
            'reverse' - вернуть развёрнутую последовательность.
            'transcribe' - вернуть транскрибированную последовательность.
            'complement' - вернуть комплементарную последовательность.
            'reverse_complement' - вернуть обратную комплементарную.
            последовательность.
    Возвращаемое значение: строка с одной последовательностью нуклеиновых
    кислот или список последовательностей нуклеиновых кислот, в зависимости
    от количества переданных изначально послдеовательностей.
    """
    seq: tuple = args[: -1]
    if valid(seq) is False:  # Проверка введёной последовательности
        return "Please insert correct sequence"
    elif args[-1] == 'transcribe':  # Вып-ие ф-ии транскрибирования
        return transcribe(seq)
    elif args[-1] == 'reverse':  # Вып-ие ф-ии реверсирования
        return reverse(seq)
    elif args[-1] == 'complement':  # Вып-ие ф-ии комплементирования
        return complement(seq)
    elif args[-1] == 'reverse_complement':  # Вып-ие ф-ии компл-ия и рев-ия
        return reverse_complement(seq)


def filter_fastq(seq: dict, gc_bounds: int | tuple = (0, 100),
                 length_bounds: int | tuple = (0, 2**32),
                 quality_threshold: int = 0) -> dict:
    """
    Функция filter_fastq(seq, gc_bounds,length_bounds,quality_threshold)
    возвращает словарь состоящий из FASTQ-сиквенсов удовлетворящих параметрам
    фильтрации.
    Функция принимает на вход 4 аргумента, seq - словарь состоящий из FASTQ-
    сиквенсов и параметры фильтрации:
        gc_bounds - интервал состава GC в процентах, по умолчанию
        gc_bound = (0, 100)от 0% до 100%, при вводе gc_bound = (20, 80)-
        от 20% до 80% включительно. При вводеодного числа, считается,
        что это верхняя граница gc_bound = 45 - состав GC меньше  или
        равен 45%.
        length_bounds - длина интервала для фильтрации, по умолчанию
        length_bounds = (0, 2**32),от 0 до 2 в степени 32.
        При вводе одного числа,считается, что это верхняя граница,
        length_bounds = 32 - от 0 до 32
        quality_threshold - пороговое значение качества среднего рида,
        по умолчанию равно 0(шкала Phred33). Риды со ступенью
        качества по всем нуклеотидам ниже порогового отбрасываются.
    Возвращаемое значение:словарь состоящий из FASTQ-сиквенсов
    удовлетворящих параметрамфильтрации, при наличии таковых или пустой
    при отсутсвии иквенсов удовлетворящих параметрам.
    """
    res_seq: dict = {}
    for Rec in seq:
        if ch_length_bounds(seq[Rec], length_bounds):
            """Передача сиквенса в ф-ию проверки соответсвия
            интервалу длины рида"""
            if ch_gc_bounds(seq[Rec], gc_bounds):
                """Передача сиквенса в ф-ию проверки соответсвия
                интервалу состава GC в процентах"""
                if ch_quality_threshold(seq[Rec], quality_threshold):
                    """Передача сиквенса в ф-ию проверки соответсвия
                    пороговому значению качества среднего рида"""
                    res_seq[Rec] = seq[Rec]
                    """При соответствии сиквенса
                    заданным параметрам,он вносится в результирующий
                    словарь"""
    return res_seq
